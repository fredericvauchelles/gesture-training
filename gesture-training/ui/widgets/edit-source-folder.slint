import { Palette, HorizontalBox, VerticalBox, LineEdit } from "std-widgets.slint";
import { Button } from "button.slint";
import { Label } from "label.slint";
import { StatusIconData, StatusIconType } from "status-icon.slint";
import { CustomPalette, Icons } from "styling.slint";

export struct EditSourceFolderData {
    id: string,
    name: string,
    path: string,
    image-count: int,
    status: StatusIconData,
}

export global EditSourceFolderNative {
    callback get-folder-source-data-from-id(string) -> EditSourceFolderData;
    callback is-folder-source-data-from-id-valid(string) -> bool;
    callback add-or-save-folder-source(EditSourceFolderData);

    callback request-asked-path() -> int;

    callback clear-source-folder-editor();

    // Test implementations
    get-folder-source-data-from-id(string) => { {
        path: "my path",
        id: "000",
        name: "Test",
    } }
}

export component EditSourceFolder inherits VerticalBox {
    in property<bool> enabled: true;
    in property<bool> enable-pick-path: true;

    callback on-add-or-save;
    callback cancel;
    callback delete(string);

    property<bool> is-add;
    property<EditSourceFolderData> data;

    out property<string> name;
    out property<string> path;

    out property<int> request-asked-path-id;
    public function request-asked-path-completed(id: int, new-path: string) {
        if (id == request-asked-path-id) {
            path = new-path;
        }
    }

    public function setup-add() {
        is-add = true;
        EditSourceFolderNative.clear-source-folder-editor();

        data.id = "";
        name = "Unnamed";
        path = "path/to/folder";
    }

    public function setup-edit(source-id: string) -> bool {
        data = EditSourceFolderNative.get-folder-source-data-from-id(source-id);
        if (data.id == "") {
            return false;
        }
        EditSourceFolderNative.clear-source-folder-editor();
        name = data.name;
        path = data.path;
        
        is-add = false;
        return true;
    }

    Rectangle {
        border-radius: CustomPalette.border;

        VerticalBox {
            spacing: 0;

            Label {
                text: is-add ? "Add Folder" : "Edit Folder";
            }

            // space
            Rectangle {
                height: 4px;
            }
            
            Rectangle {
                height: CustomPalette.preferred-field-height;
                background: Palette.control-background;
                border-top-left-radius: CustomPalette.border;
                border-top-right-radius: CustomPalette.border;
                border-width: CustomPalette.border-width;
                border-color: Palette.background;

                HorizontalBox {
                    Text {
                        text: "Name";
                        vertical-alignment: center;
                    }
                    TextInput {
                        enabled <=> root.enabled;

                        horizontal-alignment: right;
                        vertical-alignment: center;
                        text <=> name;
                        color: Palette.control-foreground.darker(25%);

                        edited => { data.name = self.text; }
                    }
                    Rectangle {
                        width: CustomPalette.preferred-icon-size;
                    }
                }
            }

            Rectangle {
                height: CustomPalette.preferred-field-height;
                background: Palette.control-background;
                border-width: CustomPalette.border-width;
                border-color: Palette.background;

                HorizontalBox {
                    padding: 0;
                    spacing: 0;
                    Text {
                        text: "Folder Path";
                        vertical-alignment: center;
                    }
                    if !enable-pick-path: LineEdit {
                        text <=> path;

                        edited(value) => { data.path = value; }
                        accepted(value) => { data.path = value; }
                    }
                    if enable-pick-path: HorizontalBox {
                        Text {
                            horizontal-alignment: right;
                            vertical-alignment: center;
                            text <=> path;
                            color: Palette.control-foreground.darker(25%);
                        }
                        Button {
                            enabled <=> root.enabled;

                            icon: Icons.edit;
                            width: CustomPalette.preferred-icon-size;
                            height: CustomPalette.preferred-icon-size;
                            padding: 0;

                            clicked => {
                                request-asked-path-id = EditSourceFolderNative.request-asked-path();
                            }
                        }
                    }
                }
            }

            if !root.is-add : Rectangle {
                height: CustomPalette.preferred-field-height;
                background: Palette.control-background;
                border-width: CustomPalette.border-width;
                border-color: Palette.background;

                HorizontalBox {
                    padding-right: 0;
                    padding-top: 0;
                    padding-bottom: 0;
                    Text {
                        text: "Delete";
                        vertical-alignment: center;
                    }
                    Button {
                        enabled <=> root.enabled;

                        width: CustomPalette.preferred-field-height * 3;
                        icon: Icons.minus-circle;
                        padding: 0;
                        text: "Delete";
                        content-color: red;
                        border-radius: 0;
                        clicked => { delete(data.id); }
                    }
                }
            }

            Rectangle {
                background: Palette.control-background;
                border-bottom-left-radius: CustomPalette.border;
                border-bottom-right-radius: CustomPalette.border;

                HorizontalBox {
                    padding: 0;
                    spacing: 0;

                    Button {
                        enabled <=> root.enabled;

                        height: CustomPalette.preferred-field-height;
                        icon: Icons.plus-circle;
                        text: is-add ? "Add" : "Save";
                        border-top-left-radius: 0;
                        border-top-right-radius: 0;
                        border-bottom-right-radius: 0;

                        clicked => { 
                            update-data-from-fields();
                            EditSourceFolderNative.add-or-save-folder-source(data);
                            on-add-or-save();
                        }
                    }
                    Button {
                        enabled <=> root.enabled;

                        icon: Icons.minus-circle;
                        text: "Cancel";
                        content-color: Palette.foreground;
                        border-top-left-radius: 0;
                        border-top-right-radius: 0;
                        border-bottom-left-radius: 0;

                        clicked => { cancel(); }
                    }
                }
            }
        }
    }

    function update-data-from-fields() {
        data.name = name;
        data.path = path;
    }
}