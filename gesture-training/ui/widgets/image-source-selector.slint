import { Palette, StyleMetrics, VerticalBox, HorizontalBox, Switch, ListView } from "std-widgets.slint";
import { Button } from "button.slint";
import { StatusIcon, StatusIconData, StatusIconType } from "status-icon.slint";
import { Icons, CustomPalette } from "styling.slint";

export struct ImageSourceSelectorEntryData {
    id: string,
    enabled: bool,
    name: string,
    image-count: int,
    status: StatusIconData,
}

component ImageSourceSelectorEntryView inherits Rectangle {
    in property<bool> enabled: true;
    in-out property<ImageSourceSelectorEntryData> data;

    callback open-image-source-editor;

    height: CustomPalette.preferred-field-height;
    background: Palette.control-background;
    border-width: CustomPalette.border-width;
    border-color: Palette.background;

    HorizontalBox {
        padding-left: CustomPalette.border * 2;
        padding-right: 0;
        padding-top: 0;
        padding-bottom: 0;

        Switch {
            checked: data.enabled;
            enabled <=> root.enabled;
        }
        text := Text {
            text: data.name;
            vertical-alignment: center;
            horizontal-alignment: left;
        }
        image-count := Text {
            vertical-alignment: center;
            horizontal-alignment: right;
            width: 50px;
            text: get-image-count(data);
        }
        Rectangle {
            width: CustomPalette.preferred-icon-size;
            StatusIcon {
                data: data.status;
            }
        }
        Button {
            enabled <=> root.enabled;
            icon: Icons.more-horizontal-square;
            border-radius: 0;
            width: 50px;

            clicked => { open-image-source-editor(); }
        }
    }

    pure function get-image-count(data: ImageSourceSelectorEntryData) -> string {
        if (data.status.type == StatusIconType.Valid) {
            data.image-count
        } else {
            "?"
        }
    }
}

export component ImageSourceSelector inherits Rectangle {
    in property<bool> enabled: true;
    in property<[ImageSourceSelectorEntryData]> datas;

    callback open-image-source-editor(string);

    VerticalBox {
        padding: 0;
        spacing: 0;

        for data[index] in datas: ImageSourceSelectorEntryView {
            enabled <=> root.enabled;
            data: data;
            open-image-source-editor => {
                open-image-source-editor(data.id);
            }
        }
    }
}