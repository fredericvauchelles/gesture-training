import { Palette, StyleMetrics, Button, HorizontalBox } from "std-widgets.slint";
import { CustomStyleMetrics } from "styling.slint";

enum ItemPlace {
    First,
    Middle,
    Last,
    Alone
}

component RadioButton inherits Rectangle {
    in property<ItemPlace> item-place: ItemPlace.Alone;

    in-out property icon <=> image.source;
    in-out property text <=> text.text;

    callback clicked <=> touch.clicked;

    min-height: CustomStyleMetrics.border;

    background: Palette.control-background;
    border-top-left-radius: item-place == ItemPlace.Alone || item-place == ItemPlace.First 
        ? CustomStyleMetrics.border
        : 0px;
    border-bottom-left-radius: item-place == ItemPlace.Alone || item-place == ItemPlace.First 
        ? CustomStyleMetrics.border
        : 0px;
    border-top-right-radius: item-place == ItemPlace.Alone || item-place == ItemPlace.Last 
        ? CustomStyleMetrics.border
        : 0px;
    border-bottom-right-radius: item-place == ItemPlace.Alone || item-place == ItemPlace.Last 
        ? CustomStyleMetrics.border
        : 0px;
    border-width: 1px;
    border-color: Palette.background;
    
    image := Image {
        width: parent.width * 0.8;
        height: parent.height * 0.8;
        colorize: Palette.control-foreground;
    } 
    text := Text { 
        color: Palette.control-foreground;
    }
    touch := TouchArea {}

    states [
        pressed when touch.pressed: { 
            background: Palette.selection-background;
            image.colorize: Palette.selection-foreground;
        }
        hover when touch.has-hover: {
            background: Palette.selection-background;
            image.colorize: Palette.selection-foreground;
        }
    ]
}

export component RadioBox inherits HorizontalBox {
    in property<[{value: int, display: string}]> datas;
    in-out property<int> selected-value;
    spacing: 0;

    for data[index] in datas : RadioButton {
        item-place: datas.length < 2 
            ? ItemPlace.Alone
            :   (index == datas.length - 1 
                ? ItemPlace.Last 
                :   (index == 0 
                    ? ItemPlace.First 
                    : ItemPlace.Middle));
                    
        text: data.display;
    } 
}