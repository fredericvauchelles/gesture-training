import { Palette, Button, HorizontalBox } from "std-widgets.slint";
import { CustomPalette } from "styling.slint";

component RadioButton inherits Rectangle {
    in property<bool> enabled: true;

    in-out property<bool> selected: false;
    in-out property icon <=> image.source;
    in-out property text <=> text.text;

    callback clicked;

    min-height: CustomPalette.border;

    background: Palette.control-background;
    border-width: 1px;
    border-color: Palette.background;

    image := Image {
        width: parent.width * 0.8;
        height: parent.height * 0.8;
        colorize: Palette.foreground;
    } 
    text := Text { 
        color: Palette.foreground;
    }
    touch := TouchArea {
        clicked => {
            if root.enabled {
                root.clicked();
            }
        }
    }

    states [
        disabled-selected when !enabled && selected: {
            background: Palette.selection-background.darker(25%);
            image.colorize: Palette.selection-foreground.darker(25%);
            text.color : Palette.selection-foreground.darker(25%);
        }
        disabled-pressed when !enabled && !selected && touch.pressed: {
            background: Palette.background.darker(25%);
            image.colorize: Palette.foreground.darker(25%);
            text.color : Palette.foreground.darker(25%);
        }
        disabled-hover when !enabled && !selected && touch.has-hover: {
            background: Palette.alternate-background.darker(25%);
            image.colorize: Palette.alternate-foreground.darker(25%);
            text.color : Palette.alternate-foreground.darker(25%);
        }
        disabled when !enabled: {
            background: Palette.control-background.darker(25%);
            image.colorize: Palette.foreground.darker(25%);
            text.color : Palette.foreground.darker(25%);
        }

        normal-selected when selected: {
            background: Palette.selection-background;
            image.colorize: Palette.selection-foreground;
            text.color : Palette.selection-foreground;
        }
        normal-pressed when !selected && touch.pressed: {
            background: Palette.background;
            image.colorize: Palette.foreground;
            text.color : Palette.foreground;
        }
        normal-hover when !selected && touch.has-hover: {
            background: Palette.alternate-background;
            image.colorize: Palette.alternate-foreground;
            text.color : Palette.alternate-foreground;
        }
    ]

    animate background {
        duration: 150ms;
    }
}

export component RadioBox inherits HorizontalBox {
    in property<bool> enabled: true;

    in property<bool> border-top-left;
    in property<bool> border-top-right;
    in property<bool> border-bottom-left;
    in property<bool> border-bottom-right;

    in property<[{value: int, display: string}]> datas;
    in-out property<int> selected-value;
    spacing: 0;
    padding: 0;

    for data[index] in datas : RadioButton {
        enabled <=> root.enabled;

        border-top-left-radius: border-top-left && index == 0 ? CustomPalette.border : 0;
        border-top-right-radius: border-top-right && index == datas.length - 1 ? CustomPalette.border : 0;
        border-bottom-left-radius: border-bottom-left && index == 0 ? CustomPalette.border : 0;
        border-bottom-right-radius: border-bottom-right && index == datas.length - 1 ? CustomPalette.border : 0;

        min-width: 30px;

        selected: data.value == selected-value;
        text: data.display;
        clicked => {
            root.selected-value = data.value;
        }
    } 
}