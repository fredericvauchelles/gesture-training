import { VerticalBox, HorizontalBox, Palette, Slider, StyleMetrics } from "std-widgets.slint";
import { CustomPalette, Icons } from "styling.slint";
import { Button } from "button.slint";

export global TimerNative {
    pure callback seconds-to-string(int) -> string;

    seconds-to-string(int) => { "00:00" }
}

export component Timer inherits Rectangle {
    in property<float> time-left: 0;
    in property<int> time-total: 90;
    in-out property<bool> is-playing: false;

    in property<length> timer-width: 80px;
    in property<length> button-width: 40px;

    callback go-to-next-image;
    callback go-to-previous-image;
    callback play-mode-changed(bool);

    width: timer-width + 2 * button-width;
    height: 50px;

    Rectangle {
        background: Palette.alternate-background;
        border-top-left-radius: CustomPalette.border;
        border-top-right-radius: CustomPalette.border;
        border-width: 1px;
        border-color: Palette.background.darker(25%);
        clip: true;

        width: 100%;
        height: CustomPalette.border;
        y: 0;

        bar := Rectangle {
            x: 0;
            y: 0;
            height: CustomPalette.border;
            width: root.width * (1 - root.progress());
            background: Palette.foreground;

            animate width {
                duration: 100ms;
            }
        }
    }

    HorizontalBox {
        padding: 0;
        spacing: 0;
        y: CustomPalette.border;
        width: 100%;
        height: root.height - bar.height;

        Button {
            icon: Icons.rewind;
            width: button-width;
            border-top-right-radius: 0;
            border-top-left-radius: 0;
            border-bottom-right-radius: 0;

            clicked => { go-to-previous-image(); }
        }

        timer-rect := Rectangle {
            width: timer-width;
            background: Palette.alternate-background;
            border-width: 1px;
            border-color: Palette.background.darker(25%);

            touch := TouchArea {
                width: timer-width;
                clicked => { 
                    root.is-playing = !root.is-playing; 
                    play-mode-changed(root.is-playing);
                }
            }

            HorizontalBox {
                width: timer-width;
        
                spacing: 0;
                padding: 0;
                alignment: center;
        
                Text {
                    width: 48px;
                    text: TimerNative.seconds-to-string(root.time-left);
                    color: Palette.foreground;
                    vertical-alignment: center;
                    horizontal-alignment: center;
                    font-size: 12pt;
                }
            
                Image {
                    width: 20px;
                    source: root.is-playing ? Icons.pause : Icons.play;
                    colorize: Palette.foreground;
                }
            }
        }

        Button {
            icon: Icons.fast-forward;
            width: button-width;
            border-top-right-radius: 0;
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;

            clicked => { go-to-next-image(); }
        }
    }

    pure function progress() -> float {
        1.0 - (root.time-left / (root.time-total * 1.0));
    }

    states [
        hover when touch.pressed: {
            timer-rect.background: Palette.background;
        }
        hover when touch.has-hover: {
            timer-rect.background: Palette.control-background;
        }
    ]
}