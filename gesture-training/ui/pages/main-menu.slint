import { Palette, StyleMetrics, VerticalBox, HorizontalBox, Switch, ListView } from "std-widgets.slint";
import { RadioBox, Label, Icons, CustomPalette, Button } from "../widgets/widgets.slint";

export enum SourceDataStatus {
    Valid,
    HasError,
    Unknown
}

export struct SourceData {
    enabled: bool,
    name: string,
    image_count: int,
    status: SourceDataStatus,
}

component SourceView inherits Rectangle {
    in property<bool> enabled: true;

    callback open-editor <=> open-editor-button.clicked;

    in-out property<SourceData> data;

    height: CustomPalette.preferred-field-height;
    background: Palette.control-background;
    border-width: CustomPalette.border-width;
    border-color: Palette.background;

    HorizontalBox {
        padding-left: CustomPalette.border * 2;
        padding-right: 0;
        padding-top: 0;
        padding-bottom: 0;

        Switch {
            checked: data.enabled;
            enabled <=> root.enabled;
        }
        text := Text {
            text: data.name;
            vertical-alignment: center;
            horizontal-alignment: left;
        }
        image-count := Text {
            vertical-alignment: center;
            horizontal-alignment: right;
            width: 50px;
            text: get-image-count(data);
        }
        Rectangle {
            width: CustomPalette.preferred-icon-size;
            Image {
                width: CustomPalette.preferred-icon-size * 0.75;
                source: get-status-icon(data.status);
                colorize: get-status-brush(data.status);
            }
        }
        open-editor-button := Button {
            enabled <=> root.enabled;
            icon: Icons.more-horizontal-square;
            border-radius: 0;
            width: 50px;
        }
    }

    pure function get-status-icon(status: SourceDataStatus) -> image {
        if (status == SourceDataStatus.Valid) {
            Icons.check-circle
        } else if (status == SourceDataStatus.HasError) {
            Icons.alert-triangle
        } else {
            Icons.refresh
        }
    }

    pure function get-status-brush(status: SourceDataStatus) -> brush {
        if (status == SourceDataStatus.Valid) {
            Palette.foreground
        } else if (status == SourceDataStatus.HasError) {
            yellow
        } else {
            Palette.foreground
        }
    }

    pure function get-image-count(data: SourceData) -> string {
        if (data.status == SourceDataStatus.Valid) {
            data.image_count
        } else {
            "?"
        }
    }
}

export component MainMenu inherits VerticalBox {
    in property<bool> enabled: false;

    callback show-add-source-folder;
    callback show-add-zip-file;
    callback open-source-editor(SourceData, int);

    in property<int> total_image_count:0;

    in-out property<[SourceData]> datas : [
        { enabled: true, name: "Clothed misc", image_count: 264, status: SourceDataStatus.Valid },
        { enabled: false, name: "Chaaron", image_count: 513, status: SourceDataStatus.HasError },
        { enabled: true, name: "Other Test", image_count: 164, status: SourceDataStatus.Unknown },
    ];

    VerticalBox {
        spacing: 0;

        Rectangle {
            height: CustomPalette.preferred-field-height;
            background: Palette.control-background;
            border-top-left-radius: CustomPalette.border;
            border-top-right-radius: CustomPalette.border;
            border-width: CustomPalette.border-width;
            border-color: Palette.background;

            Text {
                text: "Image sources";
            }
        }
        for data[index] in datas: SourceView {
            enabled <=> root.enabled;
            data: data;
            open-editor => {
                open-source-editor(data, index);
            }
        }
        HorizontalBox {
            spacing: 0;
            padding: 0;

            Rectangle {
                width: CustomPalette.preferred-field-label-width;
                background: Palette.control-background;
                border-width: CustomPalette.border-width;
                border-bottom-left-radius: CustomPalette.border;
                border-color: Palette.background;
    
                Text {
                    width: 100%;
                    x: CustomPalette.border * 2;
                    horizontal-alignment: left;
                    text: "Add Images";
                }
            }

            Button {
                enabled <=> root.enabled;

                border-radius: 0;

                icon: Icons.folder;
                colorize-icon: true;
                height: CustomPalette.preferred-field-height;

                clicked => { root.show-add-source-folder(); }
            }
            Button {
                enabled <=> root.enabled;

                border-top-left-radius: 0;
                border-top-right-radius: 0;
                border-bottom-left-radius: 0;

                icon: Icons.zip-file;
                colorize-icon: true;
                height: CustomPalette.preferred-field-height;

                clicked => { root.show-add-zip-file(); }
            }
        }
        
    }
    
    VerticalBox {
        spacing: 0;

        HorizontalBox {
            spacing: 0;
            padding: 0;
    
            Rectangle {
                width: CustomPalette.preferred-field-label-width;
                background: Palette.control-background;
                border-width: CustomPalette.border-width;
                border-top-left-radius: CustomPalette.border;
                border-color: Palette.background;
    
                Text {
                    width: 100%;
                    x: CustomPalette.border * 2;
                    horizontal-alignment: left;
                    text: "Images";
                }
            }
            RadioBox {
                enabled <=> root.enabled;

                border-top-right: true;
                height: CustomPalette.preferred-field-height;
                selected-value: 5;
                datas: [
                    {value: 5, display: "5"},
                    {value: 10, display: "10"},
                    {value: 15, display: "15"},
                    {value: 20, display: "20"},
                    {value: 25, display: "25"},
                ];
            }
        }
        HorizontalBox {
            spacing: 0;
            padding: 0;
    
            Rectangle {
                width: CustomPalette.preferred-field-label-width;
                background: Palette.control-background;
                border-width: CustomPalette.border-width;
                border-bottom-left-radius: CustomPalette.border;
                border-color: Palette.background;
    
                Text {
                    width: 100%;
                    x: CustomPalette.border * 2;
                    horizontal-alignment: left;
                    text: "Duration";
                }
            }
            RadioBox {
                enabled <=> root.enabled;

                border-bottom-right: true;
                height: CustomPalette.preferred-field-height;
                selected-value: 30;
                datas: [
                    {value: 30, display: "30''"},
                    {value: 60, display: "1'"},
                    {value: 120, display: "2'"},
                    {value: 180, display: "3'"}, 
                    {value: 300, display: "5'"}, 
                    {value: 600, display: "10'"}, 
                    {value: 1200, display: "20'"}, 
                ]; 
            }
        }
    }
    
    HorizontalBox {
        height: CustomPalette.preferred-field-height;

        Button {
            enabled <=> root.enabled;

            text: "Start (" + total_image_count + ")";
        }
    }
}