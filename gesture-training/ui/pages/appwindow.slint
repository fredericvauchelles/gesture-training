import { Button, VerticalBox, StandardListView, HorizontalBox, Palette, StyleMetrics } from "std-widgets.slint";
import { MainMenu } from "main-menu.slint";
import { RadioBox, EditSourceFolderDialog, CustomPalette } from "../widgets/widgets.slint";

enum AppFlow {
    MainMenu,
    EditSource_Folder,
}

export component AppWindow inherits Window {
    in-out property<AppFlow> app-flow: AppFlow.MainMenu;

    title: "Gesture Training";
    Rectangle {
        background: Palette.alternate-background;
    }

    Rectangle {
        width: 100%;
        height: 100%;

        Rectangle {
            width: min(CustomPalette.preferred-form-width, root.width);
            height: main-menu.preferred-height;

            main-menu := MainMenu {
                show-add-source-folder => { action-add-source-folder(); }
                open-source-editor(data, index) => { action-edit-source-folder(); }
            } 
        }
    }

    Rectangle {
        width: 100%;
        height: 100%;

        modal-overlay := Rectangle {
            opacity: 0;
            background: Palette.background;
        }

        modal-background := Rectangle {
            
            background: Palette.alternate-background;
            border-color: Palette.background;
            border-radius: CustomPalette.border;

            width: modal-width();
            height: 0;
            opacity: 0;

            dialog-edit-source-folder := EditSourceFolderDialog {
                opacity: 0;
                cancel => { app-flow = AppFlow.MainMenu; }
            }
        }
    }

    states [
        edit-source-folder when app-flow == AppFlow.EditSource_Folder: {
            modal-overlay.opacity: 0.9;
            
            modal-background.opacity: 1;
            modal-background.height: modal-height();

            dialog-edit-source-folder.opacity: 1;

            in {
                animate modal-overlay.opacity
                        , modal-background.opacity
                        , modal-background.height {
                    duration: 200ms;
                }
                animate dialog-edit-source-folder.opacity {
                    delay: 200ms;
                    duration: 200ms;
                }
            }
            out {
                animate dialog-edit-source-folder.opacity {
                    duration: 200ms;
                }
                animate modal-overlay.opacity
                        , modal-background.opacity
                        , modal-background.height {
                    delay: 200ms;
                    duration: 200ms;
                }
            }
        }
        main-menu when app-flow == AppFlow.MainMenu: {
            main-menu.enabled: true;
        }
    ]

    pure function modal-width() -> length {
        min(CustomPalette.preferred-form-width, root.width)
    }
    pure function modal-height() -> length {
        dialog-edit-source-folder.preferred-height
    }

    function action-add-source-folder() {
        dialog-edit-source-folder.setup-add();
        app-flow = AppFlow.EditSource_Folder;
    }

    function action-edit-source-folder() {
        dialog-edit-source-folder.setup-edit();
        app-flow = AppFlow.EditSource_Folder;
    }
}