import { Button, VerticalBox, StandardListView, HorizontalBox, Palette, StyleMetrics } from "std-widgets.slint";
import { MainMenu } from "main-menu.slint";
import { RadioBox, EditSourceFolderDialog, CustomPalette, StatusType } from "../widgets/widgets.slint";
import { SessionWindow } from "session.slint";
import { SourceData, SelectionData } from "main-menu.slint";

enum AppFlow {
    MainMenu,
    Session,
    EditSource_Folder,
}

export global SessionNative {
    callback on-session-start();
    callback on-session-stop();
}

export global ImageSourceNative {
    callback delete-source-at(int);
}

export component AppWindow inherits Window {
    in-out property<AppFlow> app-flow: AppFlow.MainMenu;
    in property source-datas <=> main-menu.datas;
    in property<SelectionData> selection-data <=> main-menu.selection-data;

    title: "Gesture Training";
    Rectangle {
        background: Palette.alternate-background;
    }

    Rectangle {
        width: 100%;
        height: 100%;

        Rectangle {
            width: min(CustomPalette.preferred-form-width, root.width);
            height: main-menu.preferred-height;

            main-menu := MainMenu {
                opacity: 0;
                animate opacity {
                    duration: 200ms;
                }
                
                enabled: false;
                start => { action-start-session(); }
                show-add-source-folder => { action-add-source-folder(); }
                open-source-editor(data, index) => { action-edit-source-folder(index); }
            } 
        }
    }

    Rectangle {
        width: 100%;
        height: 100%;

        modal-overlay := Rectangle {
            opacity: 0;
            background: Palette.background;
        }

        modal-background := Rectangle {
            
            background: Palette.alternate-background;
            border-color: Palette.background;
            border-radius: CustomPalette.border;

            width: modal-width();
            height: 0;
            opacity: 0;

            dialog-edit-source-folder := EditSourceFolderDialog {
                opacity: 0;
                cancel => { action-main-menu(); }
                delete(index) => { action-delete-source(index); }
                on-add-or-save => { action-main-menu(); }
            }
        }
    }

    session := SessionWindow {
        opacity: 0;

        exit-session => { action-exit-session(); }

        animate opacity {
            duration: 200ms;
        }
    }

    states [
        edit-source-folder when app-flow == AppFlow.EditSource_Folder: {
            modal-overlay.opacity: 0.9;
            
            modal-background.opacity: 1;
            modal-background.height: modal-height();

            dialog-edit-source-folder.opacity: 1;

            in {
                animate modal-overlay.opacity
                        , modal-background.opacity
                        , modal-background.height {
                    duration: 200ms;
                }
                animate dialog-edit-source-folder.opacity {
                    delay: 200ms;
                    duration: 200ms;
                }
            }
            out {
                animate dialog-edit-source-folder.opacity {
                    duration: 200ms;
                }
                animate modal-overlay.opacity
                        , modal-background.opacity
                        , modal-background.height {
                    delay: 200ms;
                    duration: 200ms;
                }
            }
        }
        main-menu when app-flow == AppFlow.MainMenu: {
            main-menu.opacity: 1;
            main-menu.enabled: true;
        }
        session when app-flow == AppFlow.Session: {
            session.opacity: 1;
        }
    ]

    pure function modal-width() -> length {
        min(CustomPalette.preferred-form-width, root.width)
    }
    pure function modal-height() -> length {
        dialog-edit-source-folder.preferred-height
    }

    function action-main-menu() {
        app-flow = AppFlow.MainMenu;
    }

    function action-add-source-folder() {
        dialog-edit-source-folder.setup-add();
        app-flow = AppFlow.EditSource_Folder;
    }

    function action-edit-source-folder(source-index: int) {
        if (dialog-edit-source-folder.setup-edit(source-index)) {
            app-flow = AppFlow.EditSource_Folder;
        }
    }

    function action-delete-source(source-index: int) {
        ImageSourceNative.delete-source-at(source-index);
        app-flow = AppFlow.MainMenu;
    }

    function action-start-session() {
        SessionNative.on-session-start();
        session.start-session();
        app-flow = AppFlow.Session;
    }

    function action-exit-session() {
        SessionNative.on-session-stop();
        app-flow = AppFlow.MainMenu;
    }
}