import { Button, VerticalBox, StandardListView, HorizontalBox, Palette, StyleMetrics } from "std-widgets.slint";
import { RadioBox, ImageSourceSelectorEntryData, 
    EditSourceFolder, EditSourceFolderData, CustomPalette 
} from "../widgets/widgets.slint";
import { SessionWindow } from "session.slint";
import { PrepareSession } from "prepare-session.slint";

// export data structs
export {
    StatusIconData, StatusIconType, EditSourceFolderNative
} from "../widgets/widgets.slint";
import { ImageSourceType, PreparedSessionData } from "common.slint";

enum AppFlow {
    PrepareSession,
    Session,
    EditSource_Folder,
}

export global SessionNative {
    callback on-session-start();
    callback on-session-stop();
}

export global ImageSourceNative {
    callback delete-source-id(string);
}

export component AppWindow inherits Window {
    in-out property<AppFlow> app-flow: AppFlow.PrepareSession;
    in property<[ImageSourceSelectorEntryData]> image-source-selector-datas <=> prepare-session.image-source-selector-datas;
    in property<PreparedSessionData> prepared-session-data <=> prepare-session.prepared-session-data;

    /** Native */
    public function dispatch-edit-source-folder-request-asked-path-completed(id: int, new-path: string) {
        edit-source-folder.request-asked-path-completed(id, new-path);
    }
    /** End Native */

    title: "Gesture Training";
    Rectangle {
        background: Palette.alternate-background;
    }

    Rectangle {
        width: 100%;
        height: 100%;

        Rectangle {
            width: min(CustomPalette.preferred-form-width, root.width);
            height: prepare-session.preferred-height;

            prepare-session := PrepareSession {
                opacity: 0;
                animate opacity {
                    duration: 200ms;
                }
                
                enabled: false;
                start-session => { action-start-session(); }
                open-add-image-source(type) => { action-open-add-image-source(type); }
                open-image-source-editor(id) => { action-edit-image-source(id); }
            } 
        }
    }

    Rectangle {
        width: 100%;
        height: 100%;

        modal-overlay := Rectangle {
            opacity: 0;
            background: Palette.background;
        }

        modal-background := Rectangle {
            
            background: Palette.alternate-background;
            border-color: Palette.background;
            border-radius: CustomPalette.border;

            width: modal-width();
            height: 0;
            opacity: 0;

            edit-source-folder := EditSourceFolder {
                opacity: 0;
                cancel => { action-prepare-session(); }
                delete(index) => { action-delete-source(index); }
                on-add-or-save => { action-prepare-session(); }
            }
        }
    }

    session := SessionWindow {
        opacity: 0;

        exit-session => { action-exit-session(); }

        animate opacity {
            duration: 200ms;
        }
    }

    states [
        edit-source-folder when app-flow == AppFlow.EditSource_Folder: {
            modal-overlay.opacity: 0.9;
            
            modal-background.opacity: 1;
            modal-background.height: modal-height();

            edit-source-folder.opacity: 1;

            in {
                animate modal-overlay.opacity
                        , modal-background.opacity
                        , modal-background.height {
                    duration: 200ms;
                }
                animate edit-source-folder.opacity {
                    delay: 200ms;
                    duration: 200ms;
                }
            }
            out {
                animate edit-source-folder.opacity {
                    duration: 200ms;
                }
                animate modal-overlay.opacity
                        , modal-background.opacity
                        , modal-background.height {
                    delay: 200ms;
                    duration: 200ms;
                }
            }
        }
        prepare-session when app-flow == AppFlow.PrepareSession: {
            prepare-session.opacity: 1;
            prepare-session.enabled: true;
        }
        session when app-flow == AppFlow.Session: {
            session.opacity: 1;
        }
    ]

    // Modal
    pure function modal-width() -> length {
        min(CustomPalette.preferred-form-width, root.width)
    }
    pure function modal-height() -> length {
        edit-source-folder.preferred-height
    }

    // Image Source
    function action-open-add-image-source(type: ImageSourceType) {
        if (type == ImageSourceType.Folder) {
            edit-source-folder.setup-add();
            app-flow = AppFlow.EditSource_Folder;
        }
    }

    function action-edit-image-source(source-id: string) {
        if (edit-source-folder.setup-edit(source-id)) {
            app-flow = AppFlow.EditSource_Folder;
        }
    }

    function action-delete-source(source-id: string) {
        ImageSourceNative.delete-source-id(source-id);
        action-prepare-session();
    }

    // Prepare session
    function action-prepare-session() {
        app-flow = AppFlow.PrepareSession;
    }

    // Session
    function action-start-session() {
        app-flow = AppFlow.Session;
        session.prepare-start-session(prepared-session-data);
        SessionNative.on-session-start();
    }

    function action-exit-session() {
        SessionNative.on-session-stop();
        action-prepare-session();
    }

    function session-show-image(img: image) {
        session.show-image(img);
    }
}