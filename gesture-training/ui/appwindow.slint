import { Button, VerticalBox, StandardListView, HorizontalBox } from "std-widgets.slint";

struct ThemeWidget {
    background-color: color,
    border-color: color,
    border-radius: length,
    border-width: length,
}

struct ThemeText {
    color: color,
}

struct ThemeBackground {
    color: color,
}

struct ThemeWidgetInput {
    label-background-color: color,
    label-color: color,
    value-background-color: color,
    value-color: color,
    height: length,
}

struct ThemeButtonState {
    color: color,
    background: color,
}
struct ThemeButton {
    normal: ThemeButtonState,
    hover: ThemeButtonState,
    pressed: ThemeButtonState,
}

struct Theme {
    background: ThemeBackground,
    text: ThemeText,
    widget: ThemeWidget,
    widget-input: ThemeWidgetInput,
    button: ThemeButton,
}

global Themes {
    in-out property<Theme> theme : {
        background: {
            color: #121212,
        },
        text: {
            color: #ffffff,
        },
        widget: {
            background-color: #282828,
            border-color: #282828,
            border-radius: 5px,
            border-width: 0px,
        },
        widget-input: {
            label-background-color: #3f3f3f,
            label-color: #ffffff,
            value-background-color: #121212,
            value-color: #ffffff,
            height: 50px,
        },
        button: {
            normal: {
                background: #575757,
                color: #ffffff,
            },
            hover: {
                background: #3f3f3f,
                color: #ffffff, 
            },
            pressed: {
                background: #282828,
                color: #ffffff,
            },
        }
    } ;
}

component BackgroundRectangle inherits Rectangle {
    background: Themes.theme.background.color;
}

component WidgetBackgroundRectangle inherits Rectangle {
    background: Themes.theme.widget.background-color;
    border-radius: Themes.theme.widget.border-radius;
    border-width: Themes.theme.widget.border-width;
    border-color: Themes.theme.widget.border-color;
}

enum ThemeButtonShape {
    Full,
    Left,
    Right,
    None
}

component ThemeButton inherits Rectangle {
    in property<ThemeButtonShape> shape: ThemeButtonShape.Full;

    in-out property icon <=> image.source;
    in-out property text <=> text.text;

    callback clicked <=> touch.clicked;

    min-height: Themes.theme.widget-input.height;

    background: Themes.theme.button.normal.background;
    border-top-left-radius: shape == ThemeButtonShape.Full || shape == ThemeButtonShape.Left 
        ? Themes.theme.widget.border-radius
        : 0px;
    border-bottom-left-radius: shape == ThemeButtonShape.Full || shape == ThemeButtonShape.Left 
        ? Themes.theme.widget.border-radius
        : 0px;
    border-top-right-radius: shape == ThemeButtonShape.Full || shape == ThemeButtonShape.Right 
        ? Themes.theme.widget.border-radius
        : 0px;
    border-bottom-right-radius: shape == ThemeButtonShape.Full || shape == ThemeButtonShape.Right 
        ? Themes.theme.widget.border-radius
        : 0px;
    
    image := Image {
        width: parent.width * 0.8;
        height: parent.height * 0.8;
        colorize: Themes.theme.button.normal.color;
    } 
    text := Text { 
        color: Themes.theme.button.normal.color;
    }
    touch := TouchArea {}

    states [
        hover when touch.pressed: { 
            background: Themes.theme.button.pressed.background;
            image.colorize: Themes.theme.button.pressed.color;
        }
        hover when touch.has-hover: {
            background: Themes.theme.button.hover.background;
            image.colorize: Themes.theme.button.hover.color;
        }
    ]
}

component ThemeToggle inherits Rectangle {
    in property<ThemeButtonShape> shape: ThemeButtonShape.Full;

    in-out property icon <=> image.source;
    in-out property text <=> text.text;

    callback clicked <=> touch.clicked;

    min-height: Themes.theme.widget-input.height;

    background: Themes.theme.button.normal.background;
    border-top-left-radius: shape == ThemeButtonShape.Full || shape == ThemeButtonShape.Left 
        ? Themes.theme.widget.border-radius
        : 0px;
    border-bottom-left-radius: shape == ThemeButtonShape.Full || shape == ThemeButtonShape.Left 
        ? Themes.theme.widget.border-radius
        : 0px;
    border-top-right-radius: shape == ThemeButtonShape.Full || shape == ThemeButtonShape.Right 
        ? Themes.theme.widget.border-radius
        : 0px;
    border-bottom-right-radius: shape == ThemeButtonShape.Full || shape == ThemeButtonShape.Right 
        ? Themes.theme.widget.border-radius
        : 0px;
    
    image := Image {
        width: parent.width * 0.8;
        height: parent.height * 0.8;
        colorize: Themes.theme.button.normal.color;
    } 
    text := Text { 
        color: Themes.theme.button.normal.color;
    }
    touch := TouchArea {}

    states [
        hover when touch.pressed: { 
            background: Themes.theme.button.pressed.background;
            image.colorize: Themes.theme.button.pressed.color;
        }
        hover when touch.has-hover: {
            background: Themes.theme.button.hover.background;
            image.colorize: Themes.theme.button.hover.color;
        }
    ]
}

component LabelField inherits HorizontalBox {
    in-out property title <=> title.text;
    spacing: 0;
    
    Rectangle { 
        width: 100px;
        min-height: Themes.theme.widget-input.height;
        
        background: Themes.theme.widget-input.label-background-color;
        border-top-left-radius: Themes.theme.widget.border-radius;
        border-bottom-left-radius: Themes.theme.widget.border-radius;

        title := Text {
            horizontal-alignment: right;
            vertical-alignment: center;
            width: parent.width - 10px;
    
            color: Themes.theme.widget-input.label-color;
        }
    }
}

component RadioBox inherits LabelField {
    in property<[{value: int, display: string}]> datas;
    in-out property<int> selected-value;

    for data[index] in datas : ThemeButton {
        shape: index < datas.length - 1 
            ? ThemeButtonShape.None 
            : ThemeButtonShape.Right;
        text: data.display;
    } 
}

component CustomDialog inherits Window {
    callback accept;
    callback cancel;
    Rectangle {
        background: white;
    }

    public function show() {
        self.visible = true;
    }
}

component AddFolderDialog inherits CustomDialog {
    VerticalBox {
        HorizontalBox {
            Text {
                text: "Name";
                width: 75px;
                vertical-alignment: center;
                horizontal-alignment: right;
            }
            TextInput {
                vertical-alignment: center;
                horizontal-alignment: center;
                text: "Name of the source";
            }
            Image {
                width: 50px;
                height: 50px;
            }
        }
        HorizontalBox {
            Text {
                text: "Path";
                width: 75px;
                vertical-alignment: center;
                horizontal-alignment: right;
            }
            Text {
                vertical-alignment: center;
                horizontal-alignment: center;
                text: "/path/to/folder";
            }
            Button {
                icon: @image-url("icons/edit.svg");
                width: 50px;
                height: 50px;
            }
        }
        HorizontalBox {
            alignment: space-around;
            padding: 0; 
            HorizontalBox {
                padding: 0;
                Button {
                    icon: @image-url("icons/check-square.svg");
                    width: 50px;
                    height: 50px;
                    clicked => { root.accept(); }
                }
                Image {
                    source: @image-url("icons/alert-triangle.svg");
                    width: 15px;
                    vertical-alignment: center;
                }
            }
            Button {
                icon: @image-url("icons/x-square.svg");
                width: 50px;
                height: 50px;
                clicked => { root.cancel(); }
            }
        }
    }
    
}

component MainMenu inherits VerticalBox {
    callback show-add-folder <=> button_add_folder.clicked;

    padding-left: 5% * root.width;
    padding-right: 5% * root.width;
    padding-top: 5% * root.height;
    padding-bottom: 5% * root.height;

    WidgetBackgroundRectangle {
        VerticalBox {
            padding-bottom: 20px;

            list := StandardListView {
    
            }
    
            LabelField {
                title: "Add Source";
        
                button_add_folder := ThemeButton {
                    shape: ThemeButtonShape.None;
                    icon: @image-url("icons/folder.svg");
                    width: 50px;
                    height: 50px;
                }
                button_add_zip := ThemeButton {
                    shape: ThemeButtonShape.Right;
                    icon: @image-url("icons/document-zip.svg");
                    width: 50px;
                    height: 50px;
                }
            }
        }
    }
    
    
    WidgetBackgroundRectangle { 
        VerticalBox {
            RadioBox {
                title: "Images";
                datas: [
                    {value: 5, display: "5"},
                    {value: 10, display: "10"},
                    {value: 15, display: "15"},
                    {value: 20, display: "20"},
                    {value: 25, display: "25"},
                ];
            }
            RadioBox {
                title: "Time";
                datas: [
                    {value: 30, display: "30''"},
                    {value: 60, display: "1'"},
                    {value: 120, display: "2'"},
                    {value: 180, display: "3'"}, 
                    {value: 300, display: "5'"}, 
                    {value: 600, display: "10'"}, 
                    {value: 600, display: "20'"}, 
                ];
            }
        }
    }
    
    HorizontalBox {
        ThemeButton {
            text: "Start";
        }
    }
}

component ModalDialogLayer inherits Window {
    visible: false;
    BackgroundRectangle {
        opacity: 0.9;
    }
    VerticalBox {
        alignment: center;
        x: 5% * root.width;
        width: 90% * root.width;
        min-height: 100px;

        dialog_add_folder := AddFolderDialog { 
            cancel => { close-modal(); } 
        } 
    }

    function close-modal() {
        self.visible = false;

        dialog_add_folder.visible = false;
    }

    public function show-add-folder() {
        self.visible = true; 

        dialog_add_folder.show();
    }
}

export component AppWindow inherits Window {
    title: "Gesture Training";
    BackgroundRectangle { }
    MainMenu {
        show-add-folder => { layer_modal.show-add-folder(); }
    } 
    layer_modal := ModalDialogLayer {
        width: root.width;
        height: root.height;
    }
}